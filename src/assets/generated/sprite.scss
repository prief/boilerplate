// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$i1-name: 'i1';
$i1-x: 0px;
$i1-y: 1344px;
$i1-offset-x: 0px;
$i1-offset-y: -1344px;
$i1-width: 900px;
$i1-height: 902px;
$i1-total-width: 3044px;
$i1-total-height: 2246px;
$i1-image: '~sprite.png';
$i1: (0px, 1344px, 0px, -1344px, 900px, 902px, 3044px, 2246px, '~sprite.png', 'i1', );
$i2-name: 'i2';
$i2-x: 1088px;
$i2-y: 0px;
$i2-offset-x: -1088px;
$i2-offset-y: 0px;
$i2-width: 1032px;
$i2-height: 940px;
$i2-total-width: 3044px;
$i2-total-height: 2246px;
$i2-image: '~sprite.png';
$i2: (1088px, 0px, -1088px, 0px, 1032px, 940px, 3044px, 2246px, '~sprite.png', 'i2', );
$i3-name: 'i3';
$i3-x: 0px;
$i3-y: 0px;
$i3-offset-x: 0px;
$i3-offset-y: 0px;
$i3-width: 1088px;
$i3-height: 1344px;
$i3-total-width: 3044px;
$i3-total-height: 2246px;
$i3-image: '~sprite.png';
$i3: (0px, 0px, 0px, 0px, 1088px, 1344px, 3044px, 2246px, '~sprite.png', 'i3', );
$i4-name: 'i4';
$i4-x: 2120px;
$i4-y: 0px;
$i4-offset-x: -2120px;
$i4-offset-y: 0px;
$i4-width: 924px;
$i4-height: 942px;
$i4-total-width: 3044px;
$i4-total-height: 2246px;
$i4-image: '~sprite.png';
$i4: (2120px, 0px, -2120px, 0px, 924px, 942px, 3044px, 2246px, '~sprite.png', 'i4', );
$spritesheet-width: 3044px;
$spritesheet-height: 2246px;
$spritesheet-image: '~sprite.png';
$spritesheet-sprites: ($i1, $i2, $i3, $i4, );
$spritesheet: (3044px, 2246px, '~sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
